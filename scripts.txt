
# Create constraints to ensure unique ids for resource types

CREATE CONSTRAINT pid FOR (p:Patient) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT prid FOR (p:Practitioner) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT orgid FOR (o:Organization) REQUIRE o.id IS UNIQUE;
CREATE CONSTRAINT encid FOR (e:Encounter) REQUIRE e.id_name IS UNIQUE;
CREATE CONSTRAINT cond FOR (c:Condition) REQUIRE c.id IS UNIQUE;
CREATE CONSTRAINT obs FOR (o:Observation) REQUIRE o.id IS UNIQUE;
CREATE CONSTRAINT mr FOR (m:MedicationRequest) REQUIRE m.id IS UNIQUE;
CREATE CONSTRAINT pr FOR (pr:Procedure) REQUIRE pr.id IS UNIQUE;
CREATE CONSTRAINT medid FOR (m:Medication) REQUIRE m.id IS UNIQUE;





#Patient Node

    CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Patient"
    CREATE (p: Patient {
      id: ent.resource.id,
      active: ent.resource.active,
      family: ent.resource.name[0].family,
      given: ent.resource.name[0].given[0],
      gender: ent.resource.gender,
      birthDate: datetime(ent.resource.birthDate),
      state: ent.resource.address[0].state,
      city: ent.resource.address[0].city,
      postalCode: ent.resource.address[0].postalCode,
      orgid: split(ent.resource.generalPractitioner[0].reference, "|")[-1]
    })

#Practitioner Node

    CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Practitioner"
    CREATE (prov: Practitioner {
      id: ent.resource.id,
      active: ent.resource.active,
      given: ent.resource.name[0].given[0],
      family: ent.resource.name[0].family,
      gender: ent.resource.gender,
      birthDate: datetime(ent.resource.birthDate)
    })

#Organization Node

   CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Organization"
    CREATE (org: Organization {
      id: ent.resource.id,
      active: ent.resource.active,
      name: ent.resource.name,
      type: ent.resource.type[0].coding[0].display,
      city: ent.resource.address[0].city,
      state: ent.resource.address[0].state,
      line: ent.resource.address[0].line[0]
    })

#Encounter Node

    CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Encounter"
    CREATE (enc: Encounter {
      id: ent.resource.id,
      class: ent.resource.class.display,
      status: ent.resource.status,
      type: ent.resource.type[0].coding[0].text,
      serviceType: ent.resource.serviceType.coding.text,
      priority: ent.resource.priority.text,
      periodStart: datetime(ent.resource.period.start),
      periodEnd: datetime(ent.resource.period.end),
      pid: ent.resource.subject.reference,
      participant: split(ent.resource.participant[0].individual.reference, "|")[-1],
      orgid: split(ent.resource.serviceProvider.reference, "|")[-1]
    })

#Condition

    CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Condition"
    CREATE (c: Condition {
      type: ent.resource.resourceType, 
      id: ent.resource.id, 
      clinicalStatus: ent.resource.clinicalStatus.coding[0].text, 
      verificationStatus: ent.resource.verificationStatus.coding[0].text,
      code: ent.resource.code.text,
      category: ent.resource.category[0].coding[0].display,
      severity: ent.resource.severity.text,
      pid: ent.resource.subject.reference,
      encref: ent.resource.encounter.reference,
      onsetDateTime: datetime(ent.resource.onsetDateTime),
      recordedDate: datetime(ent.resource.recordedDate)
    })

#Observation

   CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Observation"
    CREATE (obs: Observation {
      id: ent.resource.id,
      status: ent.resource.status,
      category: ent.resource.category[0].coding[0].display,
      code: ent.resource.code.text,
      encid: ent.resource.encounter.reference,
      effectiveDateTime: datetime(ent.resource.effectiveDateTime),
      valueQuantityValue: ent.resource.valueQuantity.value,
      valueQuantityUnit: ent.resource.valueQuantity.unit,
      valueQuantityCode: ent.resource.valueQuantity.code,
      pid: ent.resource.subject.reference
    })

#Medication

    CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType = "Medication"
    CREATE (m: Medication {
      id: ent.resource.id,
      code: ent.resource.code.coding[0].text,
      status: ent.resource.status,
      manufacturer: ent.resource.manufacturer.display,
      form: ent.resource.form.text,
      ingredient: ent.resource.ingredient[0].itemCodeableConcept.text,
      batchNumber: ent.resource.batch.lotNumber,
      expirationDate: datetime(ent.resource.batch.expirationDate)
    })

#MedicationRequest

    CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="MedicationRequest"
    CREATE (medrequest: MedicationRequest {
    id: ent.resource.id,
    status: ent.resource.status,
    intent: ent.resource.intent,
    category: ent.resource.category[0].coding[0].display,
    priority: ent.resource.priority,
    medicationText: ent.resource.medicationCodeableConcept.text,
    medicationCode: ent.resource.medicationCodeableConcept.coding[0].code,
    medid: ent.resource.medicationReference.reference,
    pid: ent.resource.subject.reference,
    encid: ent.resource.encounter.reference,
    reasonid: ent.resource.reasonReference[0].reference,
    authoredOn: datetime(ent.resource.authoredOn),
    requester: ent.resource.requester.reference
    })

#Procedure


 CALL apoc.load.json("file:///{file_path}") YIELD value
    UNWIND value.entry as ent
    WITH ent
    WHERE ent.resource.resourceType ="Procedure"
    CREATE (pr: Procedure {
      id: ent.resource.id,
      status: ent.resource.status,
      code: ent.resource.code.text,
      category: ent.resource.category.text,
      pid: ent.resource.subject.reference,
      encid: ent.resource.encounter.reference,
      performedDateTime: datetime(ent.resource.performedDateTime),
      outcome: ent.resource.outcome.text,
      reasonid: ent.resource.reasonReference[0].reference,
      recorderid: ent.resource.recorder.reference,
      asserterid: ent.resource.asserter.reference
    })

## Build relationships

#Creating relationship patient to encounter

match (p:Patient),(e:Encounter) where e.pid contains p.id CREATE (p)-[r:HASENCOUNTER]->(e)
RETURN type(r)

#Encounter to Observation

match (o: Observation),(e: Encounter) where o.encid contains e.id CREATE (e)-[r:HASOBSERVATION]->(o)
RETURN type(r)
 
#Condition to Encounter

match (c: Condition),(e: Encounter) where c.encref contains e.id CREATE (e)-[r:REVEALEDCONDITION]->(c)
RETURN type(r)

#Condition to Patient

match (c: Condition),(p: Patient) where c.pid contains p.id CREATE (p)-[r:CONDITION {date: c.onsetdate}]->(c)
RETURN type(r)

#Temporal relationship of Conditions

MATCH (c:Condition)
WITH c
ORDER BY c.onsetdate ASC
LIMIT 50
WITH collect(c) as conditions
FOREACH (i in range(0, size(conditions) - 2) |
 FOREACH (node1 in [conditions[i]] |
  FOREACH (node2 in [conditions[i+1]] |
   CREATE (node1)-[:NEXTCONDITION{date: node2.onsetdate}]->(node2))))



MATCH (c:Condition), (p:Patient) where c.pid contains p.id 
WITH c, p ORDER BY c.onsetdate ASC LIMIT 1
CREATE (p)-[r:FIRSTCONDITION {date: c.onsetdate}]->(c)
RETURN type(r)


MATCH (c:Condition), (p:Patient) where c.pid contains p.id 
WITH c, p ORDER BY c.onsetdate DESC LIMIT 1
CREATE (p)-[r:LATESTCONDITION {date: c.onsetdate}]->(c)
RETURN type(r)
 
 
#medicationrequest and condition
 
match (c: Condition),(mr: MedicationRequest) where mr.reasonid contains c.id CREATE (mr)-[r:TREATMENTFOR]->(c)
RETURN type(r)

#Procedure and Condition
#Procedure and Encounter

match (c: Condition),(pr: Procedure) where pr.reasonid contains c.id  CREATE (pr)-[r:PROCEDUREFORTREATMENT]->(c)
RETURN type(r)

match (e: Encounter),(pr: Procedure) where pr.encid contains e.id  CREATE (pr)-[r:PROCEDUREINENCOUNTER]->(c)
RETURN type(r)

#medication to medication request 
MATCH (medrequest:MedicationRequest), (m:Medication)
WHERE medrequest.medid CONTAINS m.id
CREATE (medrequest)-[r:REQUESTED]->(m)
RETURN type(r)

#medication request to encounter
MATCH (medrequest:MedicationRequest), (e:Encounter)
WHERE medrequest.encid CONTAINS e.id
CREATE (medrequest)-[r:REQUESTED]->(e)
RETURN type(r)



